openapi: 3.1.0
info:
  title: Catalog - OpenAPI 3.0
  description: |-
    This is a sample Catalog microservice based on the OpenAPI 3.0 specification.
  # termsOfService: http://swagger.io/terms/
  contact:
    email: filario@redhat.com
  license:
    identifier: apache-2.0
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
externalDocs:
  description: Find out more about Service Binding Operator
  url: https://redhat-developer.github.io/service-binding-operator/userguide/intro.html
# servers:
#   - url: https://petstore3.swagger.io/api/v3
tags:
  - name: orders
    description: Everything about your Orders
    externalDocs:
      description: Find out more
      url: https://redhat-developer.github.io/service-binding-operator/userguide/intro.html
paths:
  /orders/:
    get:
      tags:
        - order
      summary: List orders
      description: get all orders in the catalog
      operationId: getOrders
      parameters: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
    post:
      tags:
        - order
      summary: Creates an order
      description: Creates an order
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        default:
          description: successful operation
  /orders/{orderId}:
    get:
      tags:
        - order
      summary: Get order by ID
      description: get order by id in the catalog
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID Supplied
        "404":
          description: Order not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "ec6791e5-a16f-4601-b182-8a7b97d347ca"
        date:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        orderedProducts:
          type: array
          items:
            $ref: "#/components/schemas/OrderedProduct"
      xml:
        name: order
    OrderedProduct:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "ec6791e5-a16f-4601-b182-8a7b97d347ca"
        name:
          type: string
          example: Service Binding Operator T-Shirt
        photoUrl:
          type: string
          xml:
            name: photoUrl
        unitsOrdered:
          type: integer
          format: int64
          example: 10
      xml:
        name: orderedProduct
