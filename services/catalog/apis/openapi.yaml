openapi: 3.1.0
info:
  title: Catalog - OpenAPI 3.0
  description: |-
    This is a sample Catalog microservice based on the OpenAPI 3.0 specification.
  # termsOfService: http://swagger.io/terms/
  contact:
    email: filario@redhat.com
  license:
    identifier: apache-2.0
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
externalDocs:
  description: Find out more about Service Binding Operator
  url: https://redhat-developer.github.io/service-binding-operator/userguide/intro.html
# servers:
#   - url: https://petstore3.swagger.io/api/v3
tags:
  - name: products
    description: Everything about your Products
    externalDocs:
      description: Find out more
      url: https://redhat-developer.github.io/service-binding-operator/userguide/intro.html
paths:
  /products/:
    get:
      tags:
        - product
      summary: List products
      description: get all products in the catalog
      operationId: getProducts
      parameters: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /products/{productId}:
    get:
      tags:
        - product
      summary: Get product by ID
      description: get product by id in the catalog
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID Supplied
        '404':
          description: Product not found
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "ec6791e5-a16f-4601-b182-8a7b97d347ca"
        name:
          type: string
          example: Service Binding Operator T-Shirt
        photoUrl:
          type: string
          xml:
            name: photoUrl
        unitSold:
          type: integer
          format: int64
          example: 10
      xml:
        name: product
